

ISNORT := /opt/snort/include/snort
SNORT := /opt/snort/bin/snort
RELEASEDIR := $(abspath p/release)
DEBUGDIR := $(abspath p/debug)
MAKEDIR := $(abspath .m)


MODULE_NAME = trout_snort

DEBUG_MODULE := $(DEBUGDIR)/$(MODULE_NAME).so
RELEASE_MODULE := $(RELEASEDIR)/$(MODULE_NAME).so

.PHONY: format mkrtest premake postmake usage

usage:
	@echo "Trout Snort plugins makefile instructions"
	@echo ""
	@echo "make build        - To build a debug build"
	@echo "make clean        - To clean all build folders"
	@echo "make format       - To run clang-format on all source files"
	@echo "make gdb          - WIP"
	@echo "make release      - To build a release build"
	@echo "make release-test - Run the test suite on release build"
	@echo "make test         - Run the test suite"
	@echo "make test-data    - Run snort with test_config/cfg.lua on pcaps"
	@echo "                    in test_data"
	@echo "make local-test   - (WIP) Set env TEST_MODULE to name of module"
	@echo ""
	@echo "Debug builds will be written to:"
	@echo $(DEBUG_MODULE)
	@echo ""
	@echo "Release builds will be written to:"
	@echo $(RELEASE_MODULE)
	@echo ""
	@echo "It is recommended to add -jX to the make command, where X denotes"
	@echo "the number of threads that should be used for building, e.g."
	@echo "'make -j8 build' means use up to 8 threads when building."


mkrtest: 
	@echo -------
	@echo debug: $(DEBUG_MODULE) release: $(RELEASE_MODULE)
	@echo Sub2: $(LIBDEFS)
	@echo deps: $(DEPS)
	@echo objs: $(OBJS)

test: $(DEBUG_MODULE)
	@echo Testing "$(TEST_DIRS)"
	cd sh3;go install
	sh3 -sanitize none -t $(DEBUG_MODULE) -tpath "$(TEST_DIRS)" $(TEST_LIMIT)

release-test: $(RELEASE_MODULE)
	@echo Testing "$(TEST_DIRS)"
	cd sh3;go install
	sh3 -sanitize none -t $(RELEASE_MODULE) -tpath "$(TEST_DIRS)" $(TEST_LIMIT)

#############################################

define README_CONTENT
  !!!Do NOT store any content you want to keep in this folder!!!

  The folder is automatically generated by the build process and all
  content in it will be deleted at random.
endef

MAKE_README_FILENAME := $(MAKEDIR)/README.TXT

clean:
	if [ -f $(DEBUG_MODULE) ]; then rm $(DEBUG_MODULE); fi
	if [ -f $(RELEASE_MODULE) ]; then rm $(RELEASE_MODULE); fi
	if [ -d $(MAKEDIR) ]; then rm -r $(MAKEDIR); fi
	@echo "\e[3;32mClean done\e[0m"

release: $(RELEASE_MODULE) | $(RELEASEDIR)
	@echo Result output to:  $(RELEASE_MODULE)
	@echo Release build done!

build: $(DEBUG_MODULE) | $(DEBUGDIR)
	@echo Result output to:  $(DEBUG_MODULE)
	@echo Debug build done!

gdb: $(DEBUG_MODULE)
	@echo "\e[3;37mStarting debugger...\e[0m"
	gdb --args $(SNORT) -v -c plugins/$(TEST_MODULE)/tests/test-local.lua --plugin-path $(DEBUGDIR) --pcap-dir plugins/$(TEST_MODULE)/tests/pcaps --warn-all

format:
	clang-format -i $(CC_SOURCES) $(CC_HEADERS)

test-data: $(DEBUG_MODULE)
	$(SNORT) -v -c test_config/cfg.lua --plugin-path $(DEBUGDIR) --pcap-dir test_data --warn-all

release-test-data: $(RELEASE_MODULE)
	$(SNORT) -v -c test_config/cfg.lua --plugin-path $(RELEASEDIR) --pcap-dir test_data --warn-all

# Look into using % in target (e.g. %/test-local)
local-test: $(DEBUG_MODULE)
	$(SNORT) -v -c plugins/$(TEST_MODULE)/tests/test-local.lua --plugin-path $(DEBUGDIR) --pcap-dir plugins/$(TEST_MODULE)/tests/pcaps --warn-all

$(MAKE_README_FILENAME): | $(MAKEDIR)
	$(file >$(MAKE_README_FILENAME),$(README_CONTENT))

$(MAKEDIR):
	mkdir -p $(MAKEDIR)


$(RELEASEDIR):
	mkdir -p $(RELEASEDIR)

$(DEBUGDIR):
	mkdir -p $(DEBUGDIR)

CC_SOURCES :=
CC_HEADERS :=
OBJS :=
DEPS :=
TEST_DIRS :=
LINK_DEPS :=
INC_DIRS :=
MODULE_LIST := 

########################################################################
# Reads FILES from all lib_def.mk files from all subfolders and adds 
# them with correct path to CC_SOURCES
define EXPAND_SOURCEFILES
  $(eval $(file <$(1)))
  LINK_DEPS += $(1)
  SRC_DIR := $(dir $(1))

  ifdef MODULE_NAME
    MODULE_LIST := $(MODULE_LIST) $(MODULE_NAME)
    undefine MODULE_NAME
  endif
  
  ifdef CC_FILES
    CC_SOURCES += $(addprefix $$(SRC_DIR),$(CC_FILES))
    undefine CC_FILES
  endif
  
  ifdef H_FILES
    CC_HEADERS += $(addprefix $$(SRC_DIR),$(H_FILES))
    undefine H_FILES
  endif
 
  ifdef TEST_FOLDER
    TEST_DIRS := $(TEST_DIRS)$(addprefix $$(SRC_DIR),$(TEST_FOLDER));
    undefine TEST_FOLDER
  endif

  ifdef PUBLIC_INC
    INC_DIRS := $(INC_DIRS) -I $(addprefix $$(SRC_DIR),$(PUBLIC_INC))
    undefine PUBLIC_INC
  endif
  
endef

LIBDEFS = $(shell find $(SOURCEDIR) -name 'lib_def.mk')
$(foreach mk_file,$(LIBDEFS),$(eval $(call EXPAND_SOURCEFILES,$(mk_file))))
########################################################################

OBJS=$(abspath $(addprefix $(MAKEDIR)/, $(subst .cc,.o,$(CC_SOURCES))))
DEPS=$(abspath $(addprefix $(MAKEDIR)/, $(subst .cc,.d,$(CC_SOURCES))))

# Include dependencies if they exists
-include ${DEPS}

# Rule for how to compile .cc files to .o files
$(MAKEDIR)/%.o : %.cc | $(MAKE_README_FILENAME)
	@mkdir -p $(dir $@)
	g++ -MMD -MT '$(patsubst %.cc,$(MAKEDIR)/%.o,$<)' -pipe -O0 -std=c++2b -Wall -fPIC -Wextra -g -I $(ISNORT) $(INC_DIRS) -c $< -o $@

# Rule for linking debug build (how to generate $(OUTPUTDIR)/$(DEBUG_MODULE) )
$(DEBUG_MODULE): $(OBJS) $(LINK_DEPS) | $(DEBUGDIR)
	@echo "\e[3;37mLinking...\e[0m"
	g++ $(OBJS) -shared -O0 -Wall -g -Wextra -o $(DEBUG_MODULE)

# Rule for linking release build (how to generate $(OUTPUTDIR)/$(RELEASE_MODULE) )
$(RELEASE_MODULE): $(CC_SOURCES) $(LINK_DEPS) | $(RELEASEDIR)
	@echo "\e[3;37mLinking...\e[0m"
	g++ -O3 -std=c++2b -fPIC -Wall -Wextra -shared -I $(ISNORT) $(INC_DIRS) $(CC_SOURCES) -o $(RELEASE_MODULE)	

